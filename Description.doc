Программа реализована с помощью 2х классов:
главный класс FractionKSoC , содержащий метод main() и
класс  Fraction, состоящий из полей типа int 
a - числитель, 
b - знаменатель,
k - основание системы счисления  в которую нужно перевести десятичную дробь a/b и 
метода String ConvertTo_K_SoC(), возвращающий значение числа a/b, записанного в k-ичной системе счисления, 
конвертированного в тип String.

Чтобы не ограничить значение k от 2 до 10 плюс количеством букв в английском алфавите или других алфавитов, 
в случае k>9, для обозначения цифр больше 9 используется запись данного числа в dec взятая в квадратные скобки. 
Например, для обозначения цифры  98 в 99ой системе счисления будет использована запись вида [98]

В методе main() происходит построчное считывание входных данных из файла fraction.txt с последующим созданием экземпляра 
объекта типа Fraction со значениями полей равных соответствующим значениям из считанной строки и добавлением созданного 
экземпляра в экземпляр объекта типа ArrayList<Fraction> .
Далее в цикле для каждого элемента из ArrayList<Fraction> вызывается метод ConvertTo_K_SoC() с выводом результата на экран.

Описание метода ConvertTo_K_SoC()

В данном методе сначала вычисляется значение дроби a/b в 10-ой системе счисления, затем целая и дробная части полученной 
дроби переводятся в k-ичную систему счисления.
Перевод целой части происходит путем последовательного деления на k сначала  исходной целой части, затем целой части 
результата предыдущего деления. Остаток от очередного деления записывается слева конечного результата. Данная операция 
происходит до тех пор пока целая часть от деления не равна нулю.
Перевод дробной части происходит путем последовательного умножения на k сначала исходной дробной части, затем дробной 
части результата предыдущего умножения. Целая часть результата очередного умножения записывается справа конечного 
результата. Данная операция продолжается до тех пор пока  дробная часть от умножения не станет равной нулю 
(случай не периодической дроби) либо не совпадет с одной из предыдущих дробных частей (случай периодической дроби). 
Для проверки 2ого случая дробные части от умножения хранятся в объекте типа ArrayList<Double>. Каждая новая дробная 
часть проверяется на предмет наличия в ArrayList<Double>. Если такая дробная часть в списке не обнаруживается, то она 
добавляется в список. Если такая дробная часть уже существует в списке, то возвращается ее индекс в списке, который 
соответствует началу периодической части.  
